//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASPEDB.UI.DBOperationsService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DBOperationsService.IDBOperations")]
    public interface IDBOperations {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBOperations/Hello", ReplyAction="http://tempuri.org/IDBOperations/HelloResponse")]
        string Hello();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBOperations/Hello", ReplyAction="http://tempuri.org/IDBOperations/HelloResponse")]
        System.Threading.Tasks.Task<string> HelloAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBOperations/Search", ReplyAction="http://tempuri.org/IDBOperations/SearchResponse")]
        ASPEDB.DTO.DB.EncryptedDBPoint[] Search(ASPEDB.DTO.DB.EncryptedDBQuery query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBOperations/Search", ReplyAction="http://tempuri.org/IDBOperations/SearchResponse")]
        System.Threading.Tasks.Task<ASPEDB.DTO.DB.EncryptedDBPoint[]> SearchAsync(ASPEDB.DTO.DB.EncryptedDBQuery query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBOperations/Update", ReplyAction="http://tempuri.org/IDBOperations/UpdateResponse")]
        ASPEDB.DTO.DB.DBOperationResponse Update(ASPEDB.DTO.DB.EncryptedDBQuery query, ASPEDB.DTO.DB.EncryptedDBValue newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBOperations/Update", ReplyAction="http://tempuri.org/IDBOperations/UpdateResponse")]
        System.Threading.Tasks.Task<ASPEDB.DTO.DB.DBOperationResponse> UpdateAsync(ASPEDB.DTO.DB.EncryptedDBQuery query, ASPEDB.DTO.DB.EncryptedDBValue newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBOperations/Delete", ReplyAction="http://tempuri.org/IDBOperations/DeleteResponse")]
        ASPEDB.DTO.DB.DBOperationResponse Delete(ASPEDB.DTO.DB.EncryptedDBQuery query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBOperations/Delete", ReplyAction="http://tempuri.org/IDBOperations/DeleteResponse")]
        System.Threading.Tasks.Task<ASPEDB.DTO.DB.DBOperationResponse> DeleteAsync(ASPEDB.DTO.DB.EncryptedDBQuery query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBOperations/Insert", ReplyAction="http://tempuri.org/IDBOperations/InsertResponse")]
        ASPEDB.DTO.DB.DBOperationResponse Insert(ASPEDB.DTO.DB.EncryptedDBPoint dbPoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBOperations/Insert", ReplyAction="http://tempuri.org/IDBOperations/InsertResponse")]
        System.Threading.Tasks.Task<ASPEDB.DTO.DB.DBOperationResponse> InsertAsync(ASPEDB.DTO.DB.EncryptedDBPoint dbPoint);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDBOperationsChannel : ASPEDB.UI.DBOperationsService.IDBOperations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBOperationsClient : System.ServiceModel.ClientBase<ASPEDB.UI.DBOperationsService.IDBOperations>, ASPEDB.UI.DBOperationsService.IDBOperations {
        
        public DBOperationsClient() {
        }
        
        public DBOperationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DBOperationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBOperationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBOperationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Hello() {
            return base.Channel.Hello();
        }
        
        public System.Threading.Tasks.Task<string> HelloAsync() {
            return base.Channel.HelloAsync();
        }
        
        public ASPEDB.DTO.DB.EncryptedDBPoint[] Search(ASPEDB.DTO.DB.EncryptedDBQuery query) {
            return base.Channel.Search(query);
        }
        
        public System.Threading.Tasks.Task<ASPEDB.DTO.DB.EncryptedDBPoint[]> SearchAsync(ASPEDB.DTO.DB.EncryptedDBQuery query) {
            return base.Channel.SearchAsync(query);
        }
        
        public ASPEDB.DTO.DB.DBOperationResponse Update(ASPEDB.DTO.DB.EncryptedDBQuery query, ASPEDB.DTO.DB.EncryptedDBValue newValue) {
            return base.Channel.Update(query, newValue);
        }
        
        public System.Threading.Tasks.Task<ASPEDB.DTO.DB.DBOperationResponse> UpdateAsync(ASPEDB.DTO.DB.EncryptedDBQuery query, ASPEDB.DTO.DB.EncryptedDBValue newValue) {
            return base.Channel.UpdateAsync(query, newValue);
        }
        
        public ASPEDB.DTO.DB.DBOperationResponse Delete(ASPEDB.DTO.DB.EncryptedDBQuery query) {
            return base.Channel.Delete(query);
        }
        
        public System.Threading.Tasks.Task<ASPEDB.DTO.DB.DBOperationResponse> DeleteAsync(ASPEDB.DTO.DB.EncryptedDBQuery query) {
            return base.Channel.DeleteAsync(query);
        }
        
        public ASPEDB.DTO.DB.DBOperationResponse Insert(ASPEDB.DTO.DB.EncryptedDBPoint dbPoint) {
            return base.Channel.Insert(dbPoint);
        }
        
        public System.Threading.Tasks.Task<ASPEDB.DTO.DB.DBOperationResponse> InsertAsync(ASPEDB.DTO.DB.EncryptedDBPoint dbPoint) {
            return base.Channel.InsertAsync(dbPoint);
        }
    }
}
